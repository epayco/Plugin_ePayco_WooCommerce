function clearMessage() {
    document.querySelector(".ep-alert").remove()
}

function clearElement(e) {
    document.getElementById(e).remove()
}

function mpMsgElement(e, t, n, s, a, o) {
    const c = document.getElementById(e), i = document.createElement("div");
    i.className = "ep-card-info", i.id = e.concat("-card-info");
    const d = document.createElement("div");
    d.className = "ep-alert-color-".concat(o);
    const m = document.createElement("div");
    m.className = "ep-card-body-payments-error ep-card-body-size";
    const l = document.createElement("div");
    l.className = "ep-icon-badge-warning";
    const p = document.createElement("span");
    p.className = "ep-text-title", p.appendChild(document.createTextNode(t));
    const r = document.createElement("span");
    r.className = "ep-helper-test", r.appendChild(document.createTextNode(n));
    const u = document.createElement("div");
    if (u.appendChild(p), void 0 !== s) {
        const e = document.createElement("a");
        e.href = s, e.className = "ep-settings-blue-text", e.appendChild(document.createTextNode(a)), e.setAttribute("target", "_blank"), r.appendChild(e)
    }
    c.appendChild(i),
    u.appendChild(r),
    m.appendChild(l),
    m.appendChild(u),
    //i.appendChild(d),
    i.appendChild(m),
    "alert" === o && setTimeout(clearElement, 1e4, i.id)
}

function selectTestMode(e) {
    const t = document.getElementById("ep-mode-badge"),
        n = document.getElementById("ep-orange-badge"),
        s = document.getElementById("ep-icon-badge"),
        a = document.getElementById("ep-helper-test"),
        o = document.getElementById("ep-helper-prod"),
        c = document.getElementById("ep-title-helper-prod"),
        i = document.getElementById("ep-title-helper-test"),
        d = document.getElementById("ep-mode-badge-test"),
        m = document.getElementById("ep-mode-badge-prod");
    if (e) t.classList.remove("ep-settings-prod-mode-alert"),
        t.classList.add("ep-settings-test-mode-epayco-alert"),
        n.classList.remove("ep-settings-alert-payment-methods-green"),
        n.classList.add("ep-settings-alert-payment-methods-yellow"),
        s.classList.remove("ep-settings-icon-success"), s.classList.add("ep-settings-icon-warning"), mpVerifyAlertTestMode(), a.style.display = "block", o.style.display = "none", i.style.display = "block", c.style.display = "none", d.style.display = "block", m.style.display = "none"; else {
        const e = document.getElementById("ep-red-badge").parentElement;
        t.classList.remove("ep-settings-test-mode-epayco-alert"),
            t.classList.add("ep-settings-prod-mode-alert"),
            e.style.display = "none",
            n.classList.remove("ep-settings-alert-payment-methods-yellow"),
            n.classList.add("ep-settings-alert-payment-methods-green"),
            s.classList.remove("ep-settings-icon-warning"),
            s.classList.add("ep-settings-icon-success"),
            a.style.display = "none",
            o.style.display = "block", i.style.display = "none", c.style.display = "block", d.style.display = "none", m.style.display = "block"
    }
}

function mpVerifyAlertTestMode() {
    return !document.querySelector('input[name="ep-test-prod"]').checked || "" !== document.getElementById("ep-public-key-test").value && "" !== document.getElementById("ep-access-token-test").value ? (document.getElementById("ep-red-badge").parentElement.style.display = "none", !1) : (document.getElementById("ep-red-badge").parentElement.style.display = "flex", !0)
}

function mpShowMessage(e, t, n) {
    const s = document.createElement("div");
    let a = "", o = "";
    switch (n) {
        case"credentials":
            a = document.querySelector(".ep-message-credentials"), o = document.querySelector(".ep-heading-credentials");
            break;
        case"store":
            a = document.querySelector(".ep-message-store"), o = document.querySelector(".ep-heading-store");
            break;
        case"payment":
            a = document.querySelector(".ep-message-payment"), o = document.querySelector(".ep-heading-payment");
            break;
        case"test_mode":
            a = document.querySelector(".ep-message-test-mode-epayco"), o = document.querySelector(".ep-heading-test-mode-epayco");
            break;
        default:
            a = "", o = ""
    }
    s.className = "error" === t ? "ep-alert ep-alert-danger ep-text-center ep-card-body" : "ep-alert ep-alert-success ep-text-center ep-card-body", s.appendChild(document.createTextNode(e)), a.insertBefore(s, o), setTimeout(clearMessage, 3e3)
}

function mpValidateCredentialsTips() {
    const e = document.getElementById("ep-settings-icon-credentials");
    jQuery.post(ajaxurl, {
        action: "ep_validate_credentials_tips",
        nonce: epayco_settings_admin_js_params.nonce
    }, (function () {
    })).done((function (t) {
        t.success ? (e.classList.remove("ep-settings-icon-credentials"), e.classList.add("ep-settings-icon-success")) : e.classList.remove("ep-settings-icon-success")
    })).fail((function () {
        e.classList.remove("ep-settings-icon-success")
    }))
}

function mpValidatePaymentTips() {
    const e = document.getElementById("ep-settings-icon-payment");
    jQuery.post(ajaxurl, {
        action: "ep_validate_payment_tips",
        nonce: epayco_settings_admin_js_params.nonce
    }, (function () {
    })).done((function (t) {
        t.success ? (e.classList.remove("ep-settings-icon-payment"), e.classList.add("ep-settings-icon-success")) : e.classList.remove("ep-settings-icon-success")
    })).fail((function () {
        e.classList.remove("ep-settings-icon-success")
    }))
}

function mpGoToNextStep(e, t, n, s) {
    const a = document.getElementById(e),
        o = document.getElementById(n),
        c = document.getElementById(t),
        i = document.getElementById(s);
    if (a.classList.add("dropdown-hidden"),
        c.style.display = "block",
        o.classList.remove("ep-arrow-up"),
        i.classList.add("ep-arrow-up"),
    window.melidata && window.melidata.client && window.melidata.client.addStoreConfigurationsStepTimer)
        switch (t) {
        case"ep-step-2":
            window.melidata.client.addStoreConfigurationsStepTimer({step: "business"});
            break;
        case"ep-step-3":
            window.melidata.client.addStoreConfigurationsStepTimer({step: "payment_methods", sendOnClose: !0});
            break;
        case"ep-step-4":
            window.melidata.client.addStoreConfigurationsStepTimer({step: "mode"})
    }
}

function mpContinueToNextStep() {
    document.getElementById("ep-payment-method-continue").addEventListener("click", (function () {
        mpGoToNextStep("ep-step-3", "ep-step-4", "ep-payments-arrow-up", "ep-modes-arrow-up")
    }))
}

function mpGetRequirements() {
    jQuery.post(ajaxurl, {action: "mp_get_requirements", nonce: epayco_settings_admin_js_params.nonce}, (function (e) {
        const t = {
            ssl: document.getElementById("ep-req-ssl"),
            gd_ext: document.getElementById("ep-req-gd"),
            curl_ext: document.getElementById("ep-req-curl")
        };
        for (let n in t) {
            const s = t[n];
            s.style = "", e.data[n] || (s.classList.remove("ep-settings-icon-success"), s.classList.add("ep-settings-icon-warning"))
        }
    }))
}

function mpGetPaymentMethods() {
    jQuery.post(ajaxurl, {
        action: "ep_get_payment_methods",
        nonce: epayco_settings_admin_js_params.nonce
    }, (function (e) {
        const t = document.getElementById("ep-payment");
        document.querySelectorAll(".ep-settings-payment-block").forEach((e => {
            e.remove()
        })), e.data.reverse().forEach((e => {
            t.insertAdjacentElement("afterend", createMpPaymentMethodComponent(e))
        })), window.melidata && window.melidata.client && window.melidata.client.stepPaymentMethodsCallback && window.melidata.client.stepPaymentMethodsCallback()
    }))
}

function createMpPaymentMethodComponent(e) {
    const t = "yes" === e.enabled ? "ep-settings-badge-active" : "ep-settings-badge-inactive",
        n = "yes" === e.enabled ? e.badge_translator.yes : e.badge_translator.no, s = document.createElement("div");
    s.style.display="flex",
        s.style.flexDirection="column";
    return s.appendChild(getPaymentMethodComponent(e, t, n)), s
}

function getPaymentMethodComponent(e, t, n) {
    const s = `\n    
        <a href="${e.link}" class="ep-settings-link ep-settings-font-color">\n      
            <div class="ep-block ep-block-flex ep-settings-payment-block ep-settings-align-div">\n        
                <div class="ep-settings-align-div">\n          
                    <div class="ep-settings-icon">\n            
                        <img src="${e.icon}" alt="mp gateway icon" />\n         
                    </div>\n\n          
                    <span class="ep-settings-subtitle-font-size ep-settings-margin-title-payment">
                        <b style="color: #373737;">${e.title_gateway}</b> 
                        <span style="color: #4E565A;">- ${e.description}</span>
                    </span> \n\n   
                    <div style="display: flex;">\n        
                        <span class="${t}">${n}</span>\n   
                        <div class="ep-settings-icon-body">\n          
                            <div class="ep-settings-icon-config"></div>\n        
                        </div>\n    
                    </div>\n     
                </div>\n    
            </div>\n   
        </a>\n  `;
    return (new DOMParser).parseFromString(s, "text/html").firstChild
}

function mpSettingsAccordionStart() {
    let e;
    const t = document.getElementsByClassName("ep-settings-title-align");
    for (e = 0; e < t.length; e++) t[e].addEventListener("click", (function () {
        this.classList.toggle("active");
        {
            let e = null;
            for (let t = 0; t < this.childNodes.length; t++) if (this.childNodes[t]?.classList?.contains("ep-settings-margin-left")) {
                e = this.childNodes[t];
                break
            }
            e?.childNodes[1]?.classList?.toggle("ep-arrow-up")
        }
        const e = this.nextElementSibling;
        //e.style.display = window.getComputedStyle(e).display === "none" ? "block" : "none";
        if (e.className.indexOf('dropdown-hidden') > 0) {
            //e.style.display = "block"
            e.classList.remove("dropdown-hidden");
            e.classList.add("dropdown-visible");
        } else {
            e.classList.remove("dropdown-visible");
            e.classList.add("dropdown-hidden");
            //e.style.display = "none"
        }
        //"block" === e.style.display ? e.style.display = "none" : e.style.display = "block"
    }))
}

function mpSettingsAccordionOptions() {
    const e = document.getElementById("ep-advanced-options"), t = document.getElementById("block-two");
    e.addEventListener("click", (function () {
        this.classList.toggle("active");
        const n = this.nextElementSibling;
        "block" === n.style.display ? n.style.display = "none" : n.style.display = "block", e.classList.contains("active") || t.classList.contains("ep-settings-flex-start") ? (e.textContent = epayco_settings_admin_js_params.hide_advanced_text, t.classList.remove("ep-settings-flex-start")) : (t.classList.toggle("ep-settings-flex-start"), e.textContent = epayco_settings_admin_js_params.show_advanced_text)
    }))
}

function mpValidateCredentials() {
    document
        .getElementById('ep-p_cust_id')
        .addEventListener('change', function () {
            const self = this;
            if (self.value.length<5) {
                self.classList.remove('ep-credential-feedback-positive');
                self.classList.add('ep-credential-feedback-negative');
            } else {
                self.classList.remove('ep-credential-feedback-negative');
                self.classList.add('ep-credential-feedback-positive');
            }
        });

    document
        .getElementById('ep-p_key')
        .addEventListener('change', function () {
            const self = this;
            if (self.value.length<39) {
                self.classList.remove('ep-credential-feedback-positive');
                self.classList.add('ep-credential-feedback-negative');
            } else {
                self.classList.remove('ep-credential-feedback-negative');
                self.classList.add('ep-credential-feedback-positive');
            }
        });

    document
        .getElementById('ep-publicKey')
        .addEventListener('change', function () {
            const self = this;
            if (self.value.length<31) {
                self.classList.remove('ep-credential-feedback-positive');
                self.classList.add('ep-credential-feedback-negative');
            } else {
                self.classList.remove('ep-credential-feedback-negative');
                self.classList.add('ep-credential-feedback-positive');
            }
        });

    document
        .getElementById('ep-private_key')
        .addEventListener('change', function () {
            const self = this;
            if (self.value.length<31) {
                self.classList.remove('ep-credential-feedback-positive');
                self.classList.add('ep-credential-feedback-negative');
            } else {
                self.classList.remove('ep-credential-feedback-negative');
                self.classList.add('ep-credential-feedback-positive');
            }
        });
}

function showLoading() {
    document.getElementById('credentials-setup').style.opacity = '0.5';
    document.getElementById('credentials-setup').style.pointerEvents = 'none'
    document.getElementById('ep-btn-credentials').style.opacity = '0.5';
    document.getElementById('ep-btn-credentials').style.pointerEvents = 'none'
    document.getElementById('loader').style.display = 'block';
}

function hideLoading() {
    document.getElementById('credentials-setup').style.opacity = '1';
    document.getElementById('credentials-setup').style.pointerEvents = 'all'
    document.getElementById('ep-btn-credentials').style.opacity = '1';
    document.getElementById('ep-btn-credentials').style.pointerEvents = 'all'
    document.getElementById('loader').style.display = 'none';
}

function mpUpdateOptionCredentials() {
    document
        .getElementById('ep-btn-credentials')
        .addEventListener('click', function () {
            const msgAlert = document.getElementById('msg-info-credentials');
            if (msgAlert.childNodes.length >= 1) {
                document.querySelector('.ep-card-info').remove();
            }
            showLoading();
            jQuery
                .post(
                    ajaxurl,
                    {
                        p_cust_id: document.getElementById('ep-p_cust_id').value,
                        p_key: document.getElementById('ep-p_key').value,
                        publicKey: document.getElementById('ep-publicKey').value,
                        private_key: document.getElementById('ep-private_key').value,
                        action: 'ep_update_option_credentials',
                        nonce: epayco_settings_admin_js_params.nonce,
                    },
                    function () {
                    }
                )
                .done(function (response) {
                    mpGetPaymentMethods();
                    if (response.success) {
                        mpVerifyAlertTestMode();
                        mpShowMessage(response.data, 'success', 'credentials');
                        mpValidateCredentialsTips();
                        hideLoading();
                        setTimeout(() => {
                            mpGoToNextStep('ep-step-1', 'ep-step-3', 'ep-credentials-arrow-up', 'ep-modes-arrow-up');
                        }, 1000);
                    } else {
                        const rad = document.querySelectorAll('input[name="ep-test-prod"]');
                        const { message, subtitle, link, linkMsg, type, test_mode } = response?.data;

                        mpMsgElement('msg-info-credentials', message, subtitle, link, linkMsg, type);

                        if (test_mode === 'no') {
                            rad[1].checked = true;
                            selectTestMode(false);
                        } else {
                            rad[0].checked = true;
                            selectTestMode(true);
                        }

                        setTimeout(() => {
                            hideLoading();
                        }, 1000);
                    }
                })
                .fail(function (error) {
                    debugger
                    hideLoading();
                    mpShowMessage(error?.data, 'error', 'credentials');
                });
        });
}

function mpUpdateTestMode() {
    const rad = document.querySelectorAll('input[name="ep-test-prod"]');

    rad[0].addEventListener('change', function () {
        if (rad[0].checked) {
            selectTestMode(true);
        }
    });

    rad[1].addEventListener('change', function () {
        if (rad[1].checked) {
            selectTestMode(false);
        }
    });

    document
        .getElementById('ep-store-mode-save')
        .addEventListener('click', function () {
            jQuery
                .post(
                    ajaxurl,
                    {
                        input_mode_value: document.querySelector('input[name="ep-test-prod"]:checked').value,
                        input_verify_alert_test_mode: mpVerifyAlertTestMode() ? 'yes' : 'no',
                        action: 'ep_update_test_mode',
                        nonce: epayco_settings_admin_js_params.nonce,
                    },
                    function () {
                    }
                )
                .done(function (response) {
                    if (response.success) {
                        mpShowMessage(response.data, 'success', 'test_mode');
                    } else {
                        mpShowMessage(response.data, 'error', 'test_mode');
                    }
                    setTimeout(() => {
                        mpGoToNextStep('ep-step-4', 'ep-step-5', 'ep-modes-arrow-up', 'ep-store-info-arrow-up');
                    }, 1000);
                })
                .fail(function (error) {
                    mpShowMessage(error.data, 'error', 'test_mode');
                });
        });
}

function mp_settings_screen_load() {
    mpGetPaymentMethods();
    mpSettingsAccordionStart();
    mpValidateCredentials();
    mpValidateCredentialsTips();
    mpValidatePaymentTips();
    mpVerifyAlertTestMode();
    mpUpdateOptionCredentials();
    mpUpdateTestMode();
    mpContinueToNextStep();
}

function openSupportModal() {
    document.getElementById("supportModal").style.display = "block"
}

function closeSupportModal() {
    document.getElementById("supportModal").style.display = "none"
}

document.addEventListener('DOMContentLoaded', function () {
    const checkboxes = document.querySelectorAll('input[name="selected_files[]"]');
    const downloadButton = document.getElementById('downloadSelected');
    const itemsPerPage = 8;
    let currentPage = 1;

    function updateTableDisplay() {
        const startIndex = (currentPage - 1) * itemsPerPage;
        const endIndex = startIndex + itemsPerPage;

        checkboxes.forEach((checkbox, index) => {
            checkbox.closest('tr').style.display = index >= startIndex && index < endIndex ? 'table-row' : 'none';
        });
    }

    updateTableDisplay();

    checkboxes.forEach((checkbox) => {
        checkbox.addEventListener('change', function () {
            let atLeastOneChecked = false;
            checkboxes.forEach((cb) => {
                if (cb.checked) {
                    atLeastOneChecked = true;
                }
            });
            downloadButton.disabled = !atLeastOneChecked;
        });
    });
    showPassword = document.querySelector('.show-password-1');
    showPassword.addEventListener('click', () => {
        password1 = document.querySelector('#ep-publicKey');
        if ( password1.type === "text" ) {
            password1.type = "password"
            showPassword.classList.remove('ep-credential-hide-password');
            showPassword.classList.add('ep-credential-show-password');
        } else {
            password1.type = "text"
            showPassword.classList.remove('ep-credential-show-password');
            showPassword.classList.add('ep-credential-hide-password');
        }
    })
    showPassword2 = document.querySelector('.show-password-2');
    showPassword2.addEventListener('click', () => {
        password2 = document.querySelector('#ep-private_key');
        if ( password2.type === "text" ) {
            password2.type = "password"
            showPassword2.classList.remove('ep-credential-hide-password');
            showPassword2.classList.add('ep-credential-show-password');
        } else {
            password2.type = "text"
            showPassword2.classList.remove('ep-credential-show-password');
            showPassword2.classList.add('ep-credential-hide-password');
        }
    })
    /*selectAllCheckbox.addEventListener('change', function () {
        checkboxes.forEach((checkbox) => {
            checkbox.checked = selectAllCheckbox.checked;
        });
        downloadButton.disabled = !selectAllCheckbox.checked;
    });*/

});